# -*- coding: utf-8 -*-
"""BitirmeSon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y3tTtkHKsR6MrTJPLkO1-d4eDzhAsKKa
"""

pip install yahoofinancials

# Makine Öğrenmesi Algoritmalarına Dayalı Hisse Senedi Fiyat Tahmini
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.layers import Dense,LSTM
from tensorflow.keras.models import Sequential
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import yfinance as yf
from yahoofinancials import YahooFinancials

df = yf.download('VESTL.IS',
                       start = '2014-01-01',
                       progress = False)

df.index = pd.to_datetime(df.index)
dfClose = df['Close']

df.head(10)

dfClose=dfClose.iloc[:].to_numpy().reshape(-1,1)

dfClose

type(dfClose)

len(df)

len(dfClose)

plt.plot(dfClose)
plt.show()

# 10 gün input 11.gün output olarak alındı.
horizon=10
inputs=[]
for i in range(0, len(dfClose)-horizon):
    inputs.append(dfClose[i:(i+horizon)])
inputs=np.array(inputs).reshape(-1,horizon)
outputs=np.array(dfClose[horizon:])
print(inputs.shape, outputs.shape)

inputs = pd.DataFrame(inputs)

inputs1 = pd.DataFrame([0.94,0.95,0.912],columns = ['Toplam_Varlıklar'])
inputs2 = pd.DataFrame([0.35,0.31,0.39],columns = ['Volume_Degerler'])
inputs3 = pd.DataFrame([0.34],columns = ['Donem_Kari'])

repeated_small_df1 = pd.concat([inputs1]*int(np.ceil(len(inputs)/len(inputs1))), ignore_index=True).iloc[:len(inputs)]
repeated_small_df2 = pd.concat([inputs2]*int(np.ceil(len(inputs)/len(inputs2))), ignore_index=True).iloc[:len(inputs)]
repeated_small_df3 = pd.concat([inputs3]*int(np.ceil(len(inputs)/len(inputs3))), ignore_index=True).iloc[:len(inputs)]

combined_df = pd.concat([inputs, repeated_small_df1, repeated_small_df2, repeated_small_df3], axis=1)
print(combined_df)

# Standartlaştırma işlemi
scInputs = MinMaxScaler()
scaledInputs = scInputs.fit_transform(inputs)

scOutputs = MinMaxScaler()
scaledOutputs = scOutputs.fit_transform(outputs)

# train_test_split fonksiyonu ile veriyi train ve test olarak ayırma
X_train, X_test, y_train, y_test = train_test_split(scaledInputs, scaledOutputs, test_size=0.2, random_state=42)

print(X_train.shape,y_train.shape,X_test.shape,y_test.shape)

X_train

len(X_train)

y_train

len(y_train)

X_test

y_test

# Model
model = Sequential()
model.add(LSTM(128, input_shape=(1,horizon)))
model.add(Dense(63))
model.add(Dense(1))
model.compile(loss = 'mean_squared_error' ,optimizer = 'adam')

model.summary()

# fit ve predict işlemi, epochs : Kaç adımda öğrenmeyi yapıcak
model.fit(X_train.reshape(-1,1,horizon),y_train,epochs =3)

y_pred = model.predict(X_test.reshape(-1,1,horizon))
# 0-1 arası tahmin, normalize tersi alma

pred=scOutputs.inverse_transform(y_pred)
test=scOutputs.inverse_transform(y_test)

plt.plot(test,label = 'gerçek değerler')
plt.plot(pred,label = 'tahmin değerler')
plt.xlabel('Zaman')
plt.ylabel('Kapanış Fiyatı TL')
plt.legend()
plt.show()

print(np.average(np.abs(pred-test)/test))

# Hata
rmse = np.sqrt(np.mean(y_pred - y_test)**2)

rmse

from sklearn.model_selection import train_test_split
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.metrics import accuracy_score
import numpy as np

X = np.array(inputs)
y = np.array(outputs)

# Veriyi eğitim ve test seti olarak ayıralım
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# ExtraTreesClassifier modelini oluşturalım
model = ExtraTreesRegressor(n_estimators=100, random_state=42)

# Modeli eğitim verisiyle eğitelim
model.fit(X_train, y_train.reshape(-1))

# Test verisiyle tahmin yapalım
y_pred = model.predict(X_test)

# Modelin doğruluğunu hesaplayalım
y_test=y_test.reshape(-1)
accuracy = 1-np.average(np.abs((y_test - y_pred)/y_test))
print(f"Doğruluk Oranı: {accuracy}")

print(y_test.shape, y_pred.shape)